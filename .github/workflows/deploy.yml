name: Build and Deploy to Local Kubernetes

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push API Gateway
        uses: docker/build-push-action@v4
        with:
          context: ./api-gateway
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/api-gateway:${{ github.sha }}

      - name: Build and push Users Service
        uses: docker/build-push-action@v4
        with:
          context: ./users-service
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/users-service:${{ github.sha }}

      - name: Build and push Products Service
        uses: docker/build-push-action@v4
        with:
          context: ./products-service
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/products-service:${{ github.sha }}

      - name: Build and push Orders Service
        uses: docker/build-push-action@v4
        with:
          context: ./orders-service
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/orders-service:${{ github.sha }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup Minikube
        uses: medyagh/setup-minikube@master
        with:
          minikube-version: 1.28.0
          kubernetes-version: v1.25.3
          driver: docker
          
      - name: Configure minikube
        run: |
          mkdir -p $HOME/.kube
          minikube update-context
          kubectl config use-context minikube
          # Tell minikube to use the host Docker daemon
          eval $(minikube -p minikube docker-env)
          # Verify connection
          kubectl get nodes
          
      - name: Update Kubernetes manifests
        run: |
          # Create a directory for modified manifests
          mkdir -p modified-manifests

          # Update API Gateway manifest with image and pull policy
          cat kubernetes/services/api-gateway.yaml | \
            sed "s|image:.*api-gateway.*|image: ${{ secrets.DOCKER_HUB_USERNAME }}/api-gateway:${{ github.sha }}\n        imagePullPolicy: Always|g" \
            > modified-manifests/api-gateway.yaml

          # Update Users Service manifest with image and pull policy
          cat kubernetes/services/users-service.yaml | \
            sed "s|image:.*users-service.*|image: ${{ secrets.DOCKER_HUB_USERNAME }}/users-service:${{ github.sha }}\n        imagePullPolicy: Always|g" \
            > modified-manifests/users-service.yaml

          # Update Products Service manifest with image and pull policy
          cat kubernetes/services/products-service.yaml | \
            sed "s|image:.*products-service.*|image: ${{ secrets.DOCKER_HUB_USERNAME }}/products-service:${{ github.sha }}\n        imagePullPolicy: Always|g" \
            > modified-manifests/products-service.yaml

          # Update Orders Service manifest with image and pull policy
          cat kubernetes/services/orders-service.yaml | \
            sed "s|image:.*orders-service.*|image: ${{ secrets.DOCKER_HUB_USERNAME }}/orders-service:${{ github.sha }}\n        imagePullPolicy: Always|g" \
            > modified-manifests/orders-service.yaml

      - name: Verify Docker images
        run: |
          # Pull images from Docker Hub
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/api-gateway:${{ github.sha }}
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/users-service:${{ github.sha }}
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/products-service:${{ github.sha }}
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/orders-service:${{ github.sha }}
          
          # List images to verify
          docker images | grep ${{ secrets.DOCKER_HUB_USERNAME }}
          
      - name: Create namespace and apply ConfigMaps/Secrets
        run: |
          # Create namespace
          kubectl create namespace microservices || true
          
          # Apply ConfigMaps and Secrets
          kubectl apply -f kubernetes/config/configmaps.yaml -n microservices || true
          kubectl apply -f kubernetes/config/secrets.yaml -n microservices || true
          
          # Apply database and messaging resources
          kubectl apply -f kubernetes/databases/mongodb.yaml -n microservices || true
          kubectl apply -f kubernetes/databases/postgres.yaml -n microservices || true
          kubectl apply -f kubernetes/messaging/rabbitmq.yaml -n microservices || true
          
      - name: Deploy microservices
        run: |
          # Apply the modified manifests with validation disabled
          kubectl apply -f modified-manifests/api-gateway.yaml -n microservices --validate=false
          kubectl apply -f modified-manifests/users-service.yaml -n microservices --validate=false
          kubectl apply -f modified-manifests/products-service.yaml -n microservices --validate=false
          kubectl apply -f modified-manifests/orders-service.yaml -n microservices --validate=false

          # Wait for deployments to be ready
          kubectl rollout status deployment/api-gateway -n microservices
          kubectl rollout status deployment/users-service -n microservices
          kubectl rollout status deployment/products-service -n microservices
          kubectl rollout status deployment/orders-service -n microservices
          
      - name: Verify deployment
        run: |
          echo "Deployments:"
          kubectl get deployments -n microservices
          
          echo "Services:"
          kubectl get services -n microservices
          
          echo "Ingress:"
          kubectl get ingress -n microservices
